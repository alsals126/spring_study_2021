<<AOP(Aspect Oriented Programming)
- business Logic, 개발자 관점, 사용자 관점을 분리시켜서 코드를 작성하겠다.
- 횡단관심을 한 곳에 모아놓아서 처리. 이 장소를 aspect라고 한다.


<AOP 관련 용어
1. joint point: 클라이언트가 호출하는 모든 비지니스 메서드
2. pointcut : 필터링된 joint point
3. advice: 횡단관심사 기능을 자바로 구현한 것
4. aspect : AOP의 기본모듈로써, pointcut + advice임
5. target : advice를 받을 클래스
6. waving : advice를 pointcut에 적용하는 것
7. advisor: advice들을 가지고 있는 것


<Advice 종류
1. before: 메서드 호출 전에 동작하는 advice
2. after: 메서드 호출 후에 동작하는 advice
3. around: 메서드 호출 전과 후에 동작하는 advice
4. after-throwing: 예외가 발생했을 때 동작하는 advice
5. after-returning: 예외없이 메서드가 완료되면 동작하는 advice

--------------------------------------------------------------------
<aop:config>
	<aop:aspect ref="advice class가 들어감">
		<aop:pointcut id="TestBean1이 들어가야해
		expression="execution(* method3())"/>
		<aop:before method="before"/>
	</aop:aspect>
</aop:config>
=> 스프링이 method3의 호출을 주시하고 있고,
  method3이 호출되면, 지정된 advisor의 advice를 실행한다.
  위치는 <aop:before method="before"..>를 보고 지정된 advice를 실행한다.
